#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LibP2pInitInfo {
    #[prost(bytes = "vec", tag = "1")]
    pub encoded_bytes: ::prost::alloc::vec::Vec<u8>,
    /// sign based on public key of keypair not the encoded bytes
    #[prost(bytes = "vec", tag = "2")]
    pub tpm_signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub tea_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "4")]
    pub block_height_at_sign: u32,
    #[prost(bytes = "vec", tag = "5")]
    pub block_hash_at_sign: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyIdRequest {
    #[prost(uint32, tag = "1")]
    pub nonce: u32,
    /// sign based on public key of keypair not the encoded bytes
    #[prost(bytes = "vec", tag = "2")]
    pub tpm_signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub tea_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "4")]
    pub block_height_at_sign: u32,
    #[prost(bytes = "vec", tag = "5")]
    pub block_hash_at_sign: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "7")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "6")]
    pub reply_to: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyIdResponse {
    #[prost(uint32, tag = "1")]
    pub nonce: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "3")]
    pub result: bool,
    #[prost(uint32, tag = "4")]
    pub block_height_at_sign: u32,
    #[prost(uint32, tag = "6")]
    pub block_height_at_verify: u32,
    #[prost(string, tag = "5")]
    pub error: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutPeerUrlResponse {
    #[prost(string, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TeaNodeProfile {
    #[prost(uint32, tag = "1")]
    pub profile_version: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub body: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RaNode {
    #[prost(bytes = "vec", tag = "1")]
    pub tea_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "2")]
    pub is_pass: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeProfile {
    /// Generated by TPM everytime when tea node starts. It is expired when shutdown.
    #[prost(bytes = "vec", tag = "1")]
    pub ephemeral_public_key: ::prost::alloc::vec::Vec<u8>,
    /// IPFS Cid to store profile object->TeaNodeProfile
    #[prost(string, tag = "2")]
    pub profile_cid: ::prost::alloc::string::String,
    /// The node's TPM ID which generates ephemeralPublicKey and sign
    #[prost(bytes = "vec", tag = "3")]
    pub tea_id: ::prost::alloc::vec::Vec<u8>,
    /// Public URLs if this node is a bootstrap node. If would be [] if this node does not provide public service
    #[prost(string, repeated, tag = "4")]
    pub public_urls: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// ipfs peer id used for peer 2 peer communication
    #[prost(string, tag = "5")]
    pub peer_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub ra_nodes: ::prost::alloc::vec::Vec<RaNode>,
    #[prost(string, tag = "7")]
    pub status: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TeaNodeUpdateProfileRequest {
    /// Generated by TPM everytime when tea node starts. It is expired when shutdown.
    #[prost(bytes = "vec", tag = "1")]
    pub ephemeral_public_key: ::prost::alloc::vec::Vec<u8>,
    /// IPFS Cid to store profile object->TeaNodeProfile
    #[prost(string, tag = "2")]
    pub profile_cid: ::prost::alloc::string::String,
    /// The node's TPM ID which generates ephemeralPublicKey and sign
    #[prost(bytes = "vec", tag = "3")]
    pub tea_id: ::prost::alloc::vec::Vec<u8>,
    /// Public URLs if this node is a bootstrap node. If would be [] if this node does not provide public service
    #[prost(string, repeated, tag = "4")]
    pub public_urls: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// ipfs peer id used for peer 2 peer communication
    #[prost(string, tag = "5")]
    pub peer_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TeaNodeResponse {
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub node_profile: ::core::option::Option<NodeProfile>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyTeaNodeProfileIntegrityResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitRaResultRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub tea_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub target_tea_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "3")]
    pub is_pass: bool,
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitRaResultResponse {
    #[prost(string, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub tea_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub target_tea_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "4")]
    pub is_pass: bool,
    #[prost(string, tag = "5")]
    pub target_status: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AsyncPullCidDataRequest {
    #[prost(string, tag = "1")]
    pub cid: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "3")]
    pub pin: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AsyncPullCidDataResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "3")]
    pub pin: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AsyncPullCidDataResponseForNats {
    #[prost(string, tag = "1")]
    pub cid: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
